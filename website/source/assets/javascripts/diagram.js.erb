var erd = joint.shapes.erd;

var graph = new joint.dia.Graph();

var paper = new joint.dia.Paper({
  el: document.getElementById('paper'),
  width: 1000,
  height: 600,
  gridSize: 1,
  model: graph,
  linkPinning: false,
  interactive: false,
  linkConnectionPoint: joint.util.shapePerimeterConnectionPoint
});

// Custom highlighter - display an outline around each element that fits its shape.

var highlighter = V('path', {
  'stroke': '#e9fc03',
  'stroke-width': '2px',
  'fill': 'transparent',
  'pointer-events': 'none'
});

// Define a specific highligthing path for every shape.

erd.Attribute.prototype.getHighlighterPath = function(w, h) {

  return ['M', 0, h / 2, 'A', w / 2, h / 2, '0 1,0', w, h / 2, 'A', w / 2, h / 2, '0 1,0', 0, h / 2].join(' ');
};

erd.Entity.prototype.getHighlighterPath = function(w, h) {

  return ['M', w, 0, w, h, 0, h, 0, 0, 'z'].join(' ');
};

erd.Relationship.prototype.getHighlighterPath = function(w, h) {

  return ['M', w / 2, 0, w, w / 2, w / 2, w, 0, w / 2, 'z'].join(' ');
};

erd.ISA.prototype.getHighlighterPath = function(w, h) {

  return ['M', -8, 1, w + 8, 1, w / 2, h + 2, 'z'].join(' ');
};

// Unbind orignal highligting handlers.
paper.off('cell:highlight cell:unhighlight');

// Bind custom ones.
paper.on('cell:highlight', function(cellView) {

  var padding = 5;

  var bbox = g.rect(cellView.getBBox({ useModelGeometry: true })).moveAndExpand({
    x: -padding,
    y: -padding,
    width: 2 * padding,
    height: 2 * padding
  });

  highlighter.translate(bbox.x, bbox.y, { absolute: true });
  highlighter.attr('d', cellView.model.getHighlighterPath(bbox.width, bbox.height));

  V(paper.viewport).append(highlighter);
});

paper.on('cell:unhighlight', function() {

  highlighter.remove();
});

// Create shapes

var wage = new erd.WeakEntity({

  position: { x: 530, y: 200 },
  attrs: {
    text: {
      fill: '#ffffff',
      text: 'Wage',
      'letter-spacing': 0,
      style: { 'text-shadow': '1px 0 1px #333333' }
    },
    '.inner': {
      fill: '#31d0c6',
      stroke: 'none',
      points: '155,5 155,55 5,55 5,5'
    },
    '.outer': {
      fill: 'none',
      stroke: '#31d0c6',
      points: '160,0 160,60 0,60 0,0',
      filter: { name: 'dropShadow',  args: { dx: 0.5, dy: 2, blur: 2, color: '#333333' }}
    }
  }
});

var isa = new erd.ISA({

  position: { x: 125, y: 300 },
  attrs: {
    text: {
      text: 'ISA',
      fill: '#ffffff',
      'letter-spacing': 0,
      style: { 'text-shadow': '1px 0 1px #333333' }
    },
    polygon: {
      fill: '#fdb664',
      stroke: 'none',
      filter: { name: 'dropShadow',  args: { dx: 0, dy: 2, blur: 1, color: '#333333' }}
    }
  }
});

var number = new erd.Key({

  position: { x: 1, y: 90 },
  attrs: {
    text: {
      fill: '#ffffff',
      text: 'Number',
      'letter-spacing': 0,
      'text-decoration': '',
      style: { 'text-shadow': '1px 0 1px #333333' }
    },
    '.outer, .inner': {
      fill: '#226ca9',
      stroke: 'none'
    },
    '.outer': {
      filter: { name: 'dropShadow',  args: { dx: 0, dy: 2, blur: 2, color: '#222138' }}
    }
  }
});

var bigServices = new erd.Entity({

  position: { x: 100, y: 200 },
  attrs: {
    text: {
      fill: '#ffffff',
      text: 'Employee',
      'letter-spacing': 0,
      style: { 'text-shadow': '1px 0 1px #333333' }
    },
    '.outer, .inner': {
      fill: '#226ca9',
      stroke: 'none',
      filter: { name: 'dropShadow',  args: { dx: 0.5, dy: 2, blur: 2, color: '#333333' }}
    }
  }
});

var service = new erd.Relationship({

  position: { x: 300, y: 390 },
  attrs: {
    text: {
      fill: '#ffffff',
      text: 'Service',
      'letter-spacing': 0,
      style: { 'text-shadow': '1px 0 1px #333333' }
    },
    '.outer': {
      fill: '#226ca9',
      stroke: 'none',
      filter: { name: 'dropShadow',  args: { dx: 0, dy: 2, blur: 1, color: '#333333' }}
    }
  }
});

var serviceRetirement = new erd.Relationship({

  position: { x: 300, y: 390 },
  attrs: {
    text: {
      fill: '#ffffff',
      text: 'Service',
      'letter-spacing': 0,
      style: { 'text-shadow': '1px 0 1px #333333' }
    },
    '.outer': {
      fill: '#226ca9',
      stroke: '#ff0000',
      'stroke-dasharray': '3,1',
      filter: { name: 'dropShadow',  args: { dx: 0, dy: 2, blur: 2, color: '#222138' }}
    }
  }
});


var group = new erd.Entity({

  position: { x: 750, y: 90 },
  size: { width: 200, height: 200 },
  attrs: {
    text: {
      fill: '#ffffff',
      text: 'Project Example',
      'letter-spacing': 0,
      'y-alignment': -120,
      fill: '#00000',
    },
    '.outer, .inner': {
      fill: '#e6e6e6',
      stroke: 'none',
      filter: { name: 'dropShadow',  args: { dx: 0, dy: 1, blur: 1, color: '#333333' }}
    }
  }
});

var broker = new erd.IdentifyingRelationship({

  position: { x: 550, y: 250 },
  attrs: {
    text: {
      fill: '#ffffff',
      text: 'MQTT \nBroker',
      'letter-spacing': 0,
      style: { 'text-shadow': '1px 0 1px #333333' }
    },
    '.inner': {
      fill: '#226ca9',
      stroke: 'none'
    },
    '.outer': {
      fill: 'none',
      stroke: '#226ca9',
      filter: { name: 'dropShadow',  args: { dx: 0, dy: 2, blur: 1, color: '#333333' }}
    }
  }
});

// Create new shapes by cloning

var lyra = bigServices.clone().position(300, 200).attr('text/text', 'Lyra \n(automation service)');
var arcApi = bigServices.clone().position(300, 450).attr('text/text', 'Arc API');
var elektra = number.clone().position(5, 200).attr('text/text', 'Elektra');
var lyraCli = number.clone().position(5, 450).attr('text/text', 'Lyra cli');
var pkiService = service.clone().position(350, 5).attr('text/text', 'PKI');
var swiftService = service.clone().position(550, 5).attr('text/text', 'SWIFT');
var updateSite = serviceRetirement.clone().position(500, 135).attr('text/text', 'Update \nSite');
var node1 = number.clone().position(800, 125).attr('text/text', 'Node1');
var node2 = number.clone().position(800, 200).attr('text/text', 'Node2');

// Helpers

var createLink = function(elm1, elm2) {

  var myLink = new erd.Line({
    source: { id: elm1.id },
    target: { id: elm2.id },
  });

  return myLink.addTo(graph);
};

var createLabel = function(txt) {
  return {
    labels: [{
      position: -20,
      attrs: {
        text: { dy: -8, text: txt, fill: '#ffffff' },
        rect: { fill: 'none' }
      }
    }]
  };
};

// Add shapes to the graph

graph.addCells([elektra, lyraCli, lyra, arcApi, broker, pkiService, swiftService, updateSite, group, node1, node2]);

elektraToLyra = createLink(elektra, lyra);
elektraToArcApi = createLink(elektra, arcApi);
elektraToPki = createLink(elektra, pkiService);
cliToLyra = createLink(lyraCli, lyra);
cliToArcApi = createLink(lyraCli, arcApi);
cliToPki = createLink(lyraCli, pkiService);
lyraToArcApi = createLink(lyra, arcApi);
arcApiToBroker = createLink(arcApi, broker);
updateSiteToSwift = createLink(updateSite, swiftService);
node1ToUpdate = createLink(node1, updateSite);
node2ToUpdate = createLink(node2, updateSite);
node1ToSwift = createLink(node1, swiftService);
node2ToSwift = createLink(node2, swiftService);
node1ToBroker = createLink(node1, broker);
node2ToBroker = createLink(node2, broker);
node1ToPki = createLink(node1, pkiService);
node2ToPki = createLink(node2, pkiService);

//createLink(employee, paid).set(createLabel('1'));
//createLink(employee, number);
//createLink(employee, employeeName);
//createLink(employee, skills);
//createLink(employee, isa);
//createLink(isa, salesman);
//createLink(salesman, uses).set(createLabel('0..1'));
//createLink(car, uses).set(createLabel('1..1'));
//createLink(car, plate);
//createLink(wage, paid).set(createLabel('N'));
//createLink(wage, amount);
//createLink(wage, date);


function getJqueryElement(id) {
  return $("[model-id='" + id + "']");
}

function arrowSourceHidden(id) {
  link = getJqueryElement(id);
  link.find(".marker-arrowhead-group.marker-arrowhead-group-source").attr("class", "marker-arrowhead-group marker-arrowhead-group-source sourceHidden");
}

// Document is ready

$(function() {
  // remover source arrow
  arrowSourceHidden(elektraToLyra.id);
  arrowSourceHidden(elektraToArcApi.id);
  arrowSourceHidden(cliToLyra.id);
  arrowSourceHidden(cliToArcApi.id);
  arrowSourceHidden(lyraToArcApi.id);
  arrowSourceHidden(elektraToPki.id);
  arrowSourceHidden(cliToPki.id);
  arrowSourceHidden(updateSiteToSwift.id);
  arrowSourceHidden(node1ToSwift.id);
  arrowSourceHidden(node2ToSwift.id);
  arrowSourceHidden(node1ToUpdate.id);
  arrowSourceHidden(node2ToUpdate.id);
  arrowSourceHidden(node1ToBroker.id);
  arrowSourceHidden(node2ToBroker.id);
  arrowSourceHidden(node1ToPki.id);
  arrowSourceHidden(node2ToPki.id);

  // add popovers
  getJqueryElement(elektra.id).popover({ title: 'Elektra Details', content: $('#elektra_popover_content').html(), html: true,  container: '#popover_container'});
  getJqueryElement(lyraCli.id).popover({ title: 'Lyra Cli Details', content: $('#lyra_cli_popover_content').html(), html: true,  container: '#popover_container'});
  getJqueryElement(lyra.id).popover({ title: 'Lyra Details', content: $('#lyra_popover_content').html(), html: true,  container: '#popover_container'});
  getJqueryElement(arcApi.id).popover({ title: 'Arc API Details', content: $('#arc_api_popover_content').html(), html: true,  container: '#popover_container'});
  getJqueryElement(pkiService.id).popover({ title: 'PKI Details', content: $('#pki_popover_content').html(), html: true,  container: '#popover_container'});
  getJqueryElement(updateSite.id).popover({ title: 'Update Site Details <br><b class="text-danger">Retirement in progress</b>', content: $('#update_site_popover_content').html(), html: true,  container: '#popover_container'});
  getJqueryElement(broker.id).popover({ title: 'Broker Details', content: $('#broker_popover_content').html(), html: true,  container: '#popover_container'});
  getJqueryElement(swiftService.id).popover({ title: 'SWIFT Details', content: $('#swift_popover_content').html(), html: true,  container: '#popover_container'});
});